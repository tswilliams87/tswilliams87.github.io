
import { DynamoDBClient, PutItemCommand, GetItemCommand, ScanCommand } from "@aws-sdk/client-dynamodb";
import { S3Client, PutObjectCommand, GetObjectCommand } from "@aws-sdk/client-s3";
import { getSignedUrl } from "@aws-sdk/s3-request-presigner";

const REGION = process.env.AWS_REGION;
const BUCKET = "milkshake-user-images";

const dynamoDBClient = new DynamoDBClient({ region: REGION });
const s3Client = new S3Client({ region: REGION });

export const handler = async (event) => {
    console.log("HTTP Method:", event.httpMethod);
    console.log("Resource Path:", event.resource);
    console.log("Event:", JSON.stringify(event));

    try {
        const tableName = process.env.TABLE_NAME;
        const httpMethod = event.httpMethod || "POST";
        const resourcePath = event.resource || "/profiles";

        if (httpMethod === "GET" && resourcePath === "/profiles/latest-id") {
            const params = { TableName: tableName };
            const command = new ScanCommand(params);
            const response = await dynamoDBClient.send(command);
            response.Items.sort((a, b) => parseInt(b.id.S) - parseInt(a.id.S));
            const latest = response.Items[0];

            return {
                statusCode: 200,
                headers: defaultHeaders(),
                body: JSON.stringify({ data: [latest] })
            };
        }

        if (httpMethod === "POST" && resourcePath === "/profiles") {
            const body = JSON.parse(event.body);
            const { id, name, favoriteThing, imageBase64, filename } = body;

            const buffer = Buffer.from(imageBase64, 'base64');
            const key = `profiles/${filename}`;

            const uploadCommand = new PutObjectCommand({
                Bucket: BUCKET,
                Key: key,
                Body: buffer,
                ContentEncoding: "base64",
                ContentType: "image/jpeg"
            });
            await s3Client.send(uploadCommand);

            const signedUrl = await getSignedUrl(
                s3Client,
                new GetObjectCommand({ Bucket: BUCKET, Key: key }),
                { expiresIn: 3600 }
            );

            const params = {
                TableName: tableName,
                Item: {
                    id: { S: id },
                    name: { S: name },
                    favoriteThing: { S: favoriteThing },
                    picture: { S: signedUrl }
                }
            };

            const putCommand = new PutItemCommand(params);
            await dynamoDBClient.send(putCommand);

            return {
                statusCode: 201,
                headers: defaultHeaders(),
                body: JSON.stringify({ message: "Profile created successfully!" })
            };
        }

        return {
            statusCode: 404,
            headers: defaultHeaders(),
            body: JSON.stringify({ message: "Route not found" })
        };
    } catch (error) {
        console.error("Lambda error:", error);
        return {
            statusCode: 500,
            headers: defaultHeaders(),
            body: JSON.stringify({ message: "Internal server error", error: error.message })
        };
    }
};

function defaultHeaders() {
    return {
        "Content-Type": "application/json",
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Methods": "OPTIONS,POST,GET,PUT",
        "Access-Control-Allow-Headers": "Content-Type"
    };
}
