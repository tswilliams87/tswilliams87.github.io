// Lambda handler with S3 upload support using Node.js 18 and aws-sdk v3
import { DynamoDBClient, PutItemCommand, GetItemCommand, ScanCommand } from "@aws-sdk/client-dynamodb";
import { S3Client, PutObjectCommand } from "@aws-sdk/client-s3";

const dynamoDBClient = new DynamoDBClient({ region: process.env.AWS_REGION });
const s3Client = new S3Client({ region: process.env.AWS_REGION });
const BUCKET_NAME = "milkshake-user-images";

export const handler = async (event) => {
    console.log("HTTP Method:", event.httpMethod);
    console.log("Resource Path:", event.resource);
    console.log("Event:", JSON.stringify(event));

    try {
        const tableName = process.env.TABLE_NAME;
        const httpMethod = event.httpMethod || "POST";
        const resourcePath = event.resource || "/profiles";

        if (httpMethod === "GET" && resourcePath === "/profiles/latest-id") {
            const params = {
                TableName: tableName,
                Limit: 1,
                ScanIndexForward: false,
            };
            const command = new ScanCommand(params);
            const response = await dynamoDBClient.send(command);

            return {
                statusCode: 200,
                headers: {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Methods": "OPTIONS,POST,GET,PUT",
                    "Access-Control-Allow-Headers": "Content-Type",
                },
                body: JSON.stringify({
                    message: "Latest profile retrieved successfully!",
                    data: response.Items,
                }),
            };
        } else if (httpMethod === "GET" && resourcePath === "/profiles") {
            const params = {
                TableName: tableName,
            };
            const command = new ScanCommand(params);
            const response = await dynamoDBClient.send(command);

            return {
                statusCode: 200,
                headers: {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Methods": "OPTIONS,POST,GET,PUT",
                    "Access-Control-Allow-Headers": "Content-Type",
                },
                body: JSON.stringify({
                    message: "Profiles retrieved successfully!",
                    data: response.Items,
                }),
            };
        } else if (httpMethod === "POST" && resourcePath === "/profiles") {
            const body = JSON.parse(event.body);
            const { id, name, favoriteThing, imageBase64, filename } = body;

            let imageUrl = body.picture;
            if (imageBase64 && filename) {
                const buffer = Buffer.from(imageBase64, 'base64');
                const s3Params = {
                    Bucket: BUCKET_NAME,
                    Key: `profiles/${filename}`,
                    Body: buffer,
                    ContentEncoding: 'base64',
                    ContentType: 'image/jpeg',
                };
                await s3Client.send(new PutObjectCommand(s3Params));
                imageUrl = `https://${BUCKET_NAME}.s3.amazonaws.com/profiles/${filename}`;
            }

            const params = {
                TableName: tableName,
                Item: {
                    id: { S: id },
                    name: { S: name },
                    favoriteThing: { S: favoriteThing },
                    picture: { S: imageUrl },
                },
            };
            const command = new PutItemCommand(params);
            await dynamoDBClient.send(command);

            return {
                statusCode: 201,
                headers: {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Methods": "OPTIONS,POST,GET,PUT",
                    "Access-Control-Allow-Headers": "Content-Type",
                },
                body: JSON.stringify({
                    message: "Profile created successfully!",
                }),
            };
        } else if (httpMethod === "PUT" && resourcePath === "/profiles/latest-id") {
            const body = JSON.parse(event.body);
            const params = {
                TableName: tableName,
                Item: {
                    id: { S: body.id },
                    name: { S: body.name },
                    picture: { S: body.picture },
                    favoriteThing: { S: body.favoriteThing },
                },
            };
            const command = new PutItemCommand(params);
            await dynamoDBClient.send(command);

            return {
                statusCode: 200,
                headers: {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Methods": "OPTIONS,POST,GET,PUT",
                    "Access-Control-Allow-Headers": "Content-Type",
                },
                body: JSON.stringify({
                    message: "Profile updated successfully!",
                }),
            };
        } else {
            return {
                statusCode: 404,
                headers: {
                    "Content-Type": "application/json",
                    "Access-Control-Allow-Origin": "*",
                    "Access-Control-Allow-Methods": "OPTIONS,POST,GET,PUT",
                    "Access-Control-Allow-Headers": "Content-Type",
                },
                body: JSON.stringify({
                    message: "Resource not found",
                }),
            };
        }
    } catch (error) {
        console.error("Error handling request:", error);

        return {
            statusCode: 500,
            headers: {
                "Content-Type": "application/json",
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "OPTIONS,POST,GET,PUT",
                "Access-Control-Allow-Headers": "Content-Type",
            },
            body: JSON.stringify({
                message: "Internal Server Error",
                error: error.message,
            }),
        };
    }
};
